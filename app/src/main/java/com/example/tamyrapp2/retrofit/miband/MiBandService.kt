/*package com.example.tamyrapp2.retrofit.miband

import android.Manifest
import android.bluetooth.*
import android.content.Context
import android.content.pm.PackageManager
import android.util.Log
import androidx.core.app.ActivityCompat
import com.example.tamyrapp2.retrofit.auth.RetrofitInstance
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import java.util.*

class MiBandService(private val context: Context) {
    private var bluetoothGatt: BluetoothGatt? = null
    private val api = RetrofitInstance.miBandApi

    companion object {
        private const val TAG = "MiBandService"
        val HEART_RATE_UUID: UUID = UUID.fromString("00002a37-0000-1000-8000-00805f9b34fb") // UUID –ß–°–°
    }

    fun connect(device: BluetoothDevice, callback: (Boolean) -> Unit) {
        if (ActivityCompat.checkSelfPermission(context, Manifest.permission.BLUETOOTH_CONNECT) != PackageManager.PERMISSION_GRANTED) {
            Log.e(TAG, "‚ùå –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ BLUETOOTH_CONNECT!")
            return
        }

        try {
            bluetoothGatt = device.connectGatt(context, false, object : BluetoothGattCallback() {
                override fun onConnectionStateChange(gatt: BluetoothGatt, status: Int, newState: Int) {
                    if (newState == BluetoothProfile.STATE_CONNECTED) {
                        Log.d(TAG, "‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Mi Band")
                        gatt.discoverServices()
                        callback(true)
                    } else {
                        Log.d(TAG, "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç Mi Band")
                        callback(false)
                    }
                }

                override fun onServicesDiscovered(gatt: BluetoothGatt, status: Int) {
                    val heartRateService = gatt.getService(HEART_RATE_UUID)
                    val heartRateCharacteristic = heartRateService?.getCharacteristic(HEART_RATE_UUID)

                    heartRateCharacteristic?.let {
                        if (ActivityCompat.checkSelfPermission(context, Manifest.permission.BLUETOOTH_CONNECT) != PackageManager.PERMISSION_GRANTED) {
                            Log.e(TAG, "‚ùå –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ —á—Ç–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫!")
                            return
                        }
                        gatt.readCharacteristic(it)
                    }
                }

                override fun onCharacteristicRead(gatt: BluetoothGatt, characteristic: BluetoothGattCharacteristic, status: Int) {
                    if (characteristic.uuid == HEART_RATE_UUID) {
                        val heartRate = characteristic.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT8, 0) ?: 0
                        Log.d(TAG, "üíì –ü—É–ª—å—Å: $heartRate —É–¥/–º–∏–Ω")
                        sendDataToBackend(heartRate, 5000, 7, 300, 5, 80) // –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                    }
                }
            })
        } catch (e: SecurityException) {
            Log.e(TAG, "‚ùå SecurityException –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: ${e.message}")
        }
    }

    fun disconnect() {
        try {
            bluetoothGatt?.close()
            bluetoothGatt = null
        } catch (e: SecurityException) {
            Log.e(TAG, "‚ùå SecurityException –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏: ${e.message}")
        }
    }

    private fun sendDataToBackend(heartRate: Int, steps: Int, sleepHours: Int, caloriesBurned: Int, distance: Int, batteryLevel: Int) {
        val request = MiBandDataRequest(
            heartRate = heartRate,
            steps = steps,
            sleepHours = sleepHours,
            caloriesBurned = caloriesBurned,
            distance = distance,
            batteryLevel = batteryLevel
        )

        api.sendMiBandData("Bearer ACCESS_TOKEN", request).enqueue(object : Callback<Void> {
            override fun onResponse(call: Call<Void>, response: Response<Void>) {
                Log.d(TAG, "‚úÖ –î–∞–Ω–Ω—ã–µ Mi Band –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
            }

            override fun onFailure(call: Call<Void>, t: Throwable) {
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${t.message}")
            }
        })
    }
}
*/
package com.example.tamyrapp2.retrofit.miband

import android.Manifest
import android.bluetooth.*
import android.content.Context
import android.content.pm.PackageManager
import android.util.Log
import androidx.core.app.ActivityCompat
import com.example.tamyrapp2.retrofit.auth.RetrofitInstance
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import java.text.SimpleDateFormat
import java.util.*

class MiBandService(private val context: Context) {
    private var bluetoothGatt: BluetoothGatt? = null
    private val api = RetrofitInstance.miBandApi

    companion object {
        private const val TAG = "MiBandService"
        val HEART_RATE_UUID: UUID = UUID.fromString("00002a37-0000-1000-8000-00805f9b34fb") // UUID –¥–ª—è –ß–°–°
    }

    /**
     * üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Mi Band
     */
    fun connect(device: BluetoothDevice, userId: Long, callback: (Boolean) -> Unit) {
        if (ActivityCompat.checkSelfPermission(context, Manifest.permission.BLUETOOTH_CONNECT) != PackageManager.PERMISSION_GRANTED) {
            Log.e(TAG, "‚ùå –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ BLUETOOTH_CONNECT!")
            return
        }

        try {
            bluetoothGatt = device.connectGatt(context, false, object : BluetoothGattCallback() {
                override fun onConnectionStateChange(gatt: BluetoothGatt, status: Int, newState: Int) {
                    if (newState == BluetoothProfile.STATE_CONNECTED) {
                        Log.d(TAG, "‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Mi Band")
                        gatt.discoverServices()
                        callback(true)
                    } else {
                        Log.d(TAG, "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç Mi Band")
                        callback(false)
                    }
                }

                override fun onServicesDiscovered(gatt: BluetoothGatt, status: Int) {
                    val heartRateService = gatt.getService(HEART_RATE_UUID)
                    val heartRateCharacteristic = heartRateService?.getCharacteristic(HEART_RATE_UUID)

                    heartRateCharacteristic?.let {
                        if (ActivityCompat.checkSelfPermission(context, Manifest.permission.BLUETOOTH_CONNECT) != PackageManager.PERMISSION_GRANTED) {
                            Log.e(TAG, "‚ùå –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ —á—Ç–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫!")
                            return
                        }
                        gatt.readCharacteristic(it)
                    }
                }

                override fun onCharacteristicRead(
                    gatt: BluetoothGatt,
                    characteristic: BluetoothGattCharacteristic,
                    status: Int
                ) {
                    if (characteristic.uuid == HEART_RATE_UUID) {
                        val heartRate =
                            characteristic.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT8, 0) ?: 0
                        Log.d(TAG, "üíì –ü—É–ª—å—Å: $heartRate —É–¥/–º–∏–Ω")
                        sendDataToBackend(userId, heartRate, 5000, 7, 300, 5, 80)
                    }
                }
            })
        } catch (e: SecurityException) {
            Log.e(TAG, "‚ùå SecurityException –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: ${e.message}")
        }
    }

    /**
     * üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Mi Band
     */
    fun disconnect() {
        try {
            bluetoothGatt?.close()
            bluetoothGatt = null
        } catch (e: SecurityException) {
            Log.e(TAG, "‚ùå SecurityException –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏: ${e.message}")
        }
    }

    /**
     * üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö Mi Band –Ω–∞ —Å–µ—Ä–≤–µ—Ä
     */
    private fun sendDataToBackend(
        userId: Long,
        heartRate: Int,
        steps: Int,
        sleepHours: Int,
        caloriesBurned: Int,
        distance: Int,
        batteryLevel: Int
    ) {
        val timestamp = getCurrentTimestamp() // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏

        val request = MiBandDataRequest(
            userId = userId,
            heartRate = heartRate,
            steps = steps,
            sleepHours = sleepHours,
            caloriesBurned = caloriesBurned,
            distance = distance,
            batteryLevel = batteryLevel,
            timestamp = timestamp // –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        )

        api.sendMiBandData("Bearer ACCESS_TOKEN", request).enqueue(object : Callback<Void> {
            override fun onResponse(call: Call<Void>, response: Response<Void>) {
                if (response.isSuccessful) {
                    Log.d(
                        TAG, "‚úÖ –î–∞–Ω–Ω—ã–µ Mi Band –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: " +
                                "–ü—É–ª—å—Å: $heartRate, –®–∞–≥–∏: $steps, " +
                                "–°–æ–Ω: $sleepHours —á, –ö–∞–ª–æ—Ä–∏–∏: $caloriesBurned, " +
                                "–î–∏—Å—Ç–∞–Ω—Ü–∏—è: $distance –∫–º, –ë–∞—Ç–∞—Ä–µ—è: $batteryLevel%, " +
                                "–í—Ä–µ–º—è: $timestamp"
                    )
                } else {
                    Log.e(TAG, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: ${response.code()}")
                }
            }

            override fun onFailure(call: Call<Void>, t: Throwable) {
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${t.message}")
            }
        })
    }

    /**
     * üïí –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏ (ISO 8601)
     */
    private fun getCurrentTimestamp(): String {
        val dateFormat = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss", Locale.getDefault())
        return dateFormat.format(Date())
    }
}
