/*package com.example.tamyrapp2.retrofit.miband

import android.util.Log
import com.example.tamyrapp2.retrofit.auth.RetrofitInstance
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import kotlin.random.Random

class FakeMiBandService {
    private val api = RetrofitInstance.miBandApi

    companion object {
        private const val TAG = "FakeMiBandService"
    }

    /**
     * –§–µ–π–∫–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Mi Band (—Å–∏–º—É–ª—è—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)
     */
    fun connectFakeDevice(callback: (Boolean) -> Unit) {
        Log.d(TAG, "‚úÖ –§–µ–π–∫–æ–≤—ã–π Mi Band –ø–æ–¥–∫–ª—é—á–µ–Ω")
        callback(true) // –°–∏–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–µ–π–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –±—ç–∫–µ–Ω–¥
     */
    fun sendFakeDataToBackend() {
        val fakeHeartRate = Random.nextInt(60, 100) // –ü—É–ª—å—Å
        val fakeSteps = Random.nextInt(5000, 15000) // –®–∞–≥–∏
        val fakeSleepHours = Random.nextInt(4, 9) // –°–æ–Ω –≤ —á–∞—Å–∞—Ö
        val fakeCalories = Random.nextInt(150, 600) // –ö–∞–ª–æ—Ä–∏–∏
        val fakeDistance = Random.nextInt(2, 10) // –î–∏—Å—Ç–∞–Ω—Ü–∏—è (–∫–º)
        val fakeBattery = Random.nextInt(20, 100) // –ó–∞—Ä—è–¥ –±–∞—Ç–∞—Ä–µ–∏

        val request = MiBandDataRequest(
            heartRate = fakeHeartRate,
            steps = fakeSteps,
            sleepHours = fakeSleepHours,
            caloriesBurned = fakeCalories,
            distance = fakeDistance,
            batteryLevel = fakeBattery
        )

        api.sendMiBandData("Bearer ACCESS_TOKEN", request).enqueue(object : Callback<Void> {
            override fun onResponse(call: Call<Void>, response: Response<Void>) {
                Log.d(TAG, "‚úÖ –§–µ–π–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: " +
                        "–ü—É–ª—å—Å: $fakeHeartRate, –®–∞–≥–∏: $fakeSteps, " +
                        "–°–æ–Ω: $fakeSleepHours —á, –ö–∞–ª–æ—Ä–∏–∏: $fakeCalories, " +
                        "–î–∏—Å—Ç–∞–Ω—Ü–∏—è: $fakeDistance –∫–º, –ë–∞—Ç–∞—Ä–µ—è: $fakeBattery%")
            }

            override fun onFailure(call: Call<Void>, t: Throwable) {
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–µ–π–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${t.message}")
            }
        })
    }
}
*/
package com.example.tamyrapp2.retrofit.miband

import android.util.Log
import com.example.tamyrapp2.retrofit.auth.RetrofitInstance
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import java.util.Date
import kotlin.random.Random

class FakeMiBandService {
    private val api = RetrofitInstance.miBandApi

    companion object {
        private const val TAG = "FakeMiBandService"
    }

    /**
     * üì° –§–µ–π–∫–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Mi Band (—Å–∏–º—É–ª—è—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)
     */
    fun connectFakeDevice(callback: (Boolean) -> Unit) {
        Log.d(TAG, "‚úÖ –§–µ–π–∫–æ–≤—ã–π Mi Band –ø–æ–¥–∫–ª—é—á–µ–Ω")
        callback(true) // –°–∏–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    }

    /**
     * üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–µ–π–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –±—ç–∫–µ–Ω–¥
     */
    fun sendFakeDataToBackend(userId: Long) {
        val fakeHeartRate = Random.nextInt(60, 100) // –ü—É–ª—å—Å
        val fakeSteps = Random.nextInt(5000, 15000) // –®–∞–≥–∏
        val fakeSleepHours = Random.nextInt(4, 9) // –°–æ–Ω –≤ —á–∞—Å–∞—Ö
        val fakeCalories = Random.nextInt(150, 600) // –ö–∞–ª–æ—Ä–∏–∏
        val fakeDistance = Random.nextInt(2, 10) // –î–∏—Å—Ç–∞–Ω—Ü–∏—è (–∫–º)
        val fakeBattery = Random.nextInt(20, 100) // –ó–∞—Ä—è–¥ –±–∞—Ç–∞—Ä–µ–∏
        val timestamp = Date(System.currentTimeMillis()).toString() // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º Date –≤–º–µ—Å—Ç–æ LocalDateTime

        val request = MiBandDataRequest(
            userId = userId, // –ü–µ—Ä–µ–¥–∞–µ–º userId
            heartRate = fakeHeartRate,
            steps = fakeSteps,
            sleepHours = fakeSleepHours,
            caloriesBurned = fakeCalories,
            distance = fakeDistance,
            batteryLevel = fakeBattery,
            timestamp = timestamp // ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
        )

        api.sendMiBandData("Bearer ACCESS_TOKEN", request).enqueue(object : Callback<Void> {
            override fun onResponse(call: Call<Void>, response: Response<Void>) {
                if (response.isSuccessful) {
                    Log.d(TAG, "‚úÖ –§–µ–π–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: " +
                            "–ü—É–ª—å—Å: $fakeHeartRate, –®–∞–≥–∏: $fakeSteps, " +
                            "–°–æ–Ω: $fakeSleepHours —á, –ö–∞–ª–æ—Ä–∏–∏: $fakeCalories, " +
                            "–î–∏—Å—Ç–∞–Ω—Ü–∏—è: $fakeDistance –∫–º, –ë–∞—Ç–∞—Ä–µ—è: $fakeBattery%, " +
                            "–í—Ä–µ–º—è: $timestamp")
                } else {
                    Log.e(TAG, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: ${response.code()}")
                }
            }

            override fun onFailure(call: Call<Void>, t: Throwable) {
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–µ–π–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${t.message}")
            }
        })
    }
}
